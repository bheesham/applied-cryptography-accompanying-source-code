Check the CC and CFLAGS lines in the makefile

If your C library does not support the times(3) function, change the
#define TIMES to
#undef TIMES in speed.c
If it does, check the HZ value for the times(3) function.
If your system does not define CLK_TCK it will be assumed to
be 60.

If possible use gcc v 2.1.
Turn on the maximum optimising

type 'make'

run './destest' to check things are ok.
run './rpw' to check the tty code for reading passwords works.
run './speed' to see how fast those optimisations make the library run :-)

A make install will by default install
libdes.a      in /usr/local/lib/libdes.a
des           in /usr/local/bin/des
des_crypt.man in /usr/local/man/man3/des_crypt.3
des.man       in /usr/local/man/man1/des.1
des.h         in /usr/include/des.h

des(1) should be compatible with sunOS's but I have been unable to
test it.

These routines can now be compiled under MSDOS.
I have successfully encrypted files using des(1) under MSDOS and then
decrypted the files on a SparcStation.
I have been able to compile and test the routines with
Microsoft C v 5.1 and Turbo C v 2.0.
The code in this library is in no way optimised for the 16bit
operation of MSDOS.  Microsoft C generates code that is 40% slower
than Turbo C's code.  I believe this is due to problems it has with
code generation with the 32bit shift operation in the IP and FP
sections.

For Turbo C v 2.0, make sure to define MSDOS, in the relevant menu.

There is now an alternative version of the D_ENCRYPT macro that can be
enabled with the -DALT_ECB option in the makefile.  This alternative
macro can make a +-%20 speed difference to the DES encryption speed,
depending on the compiler/CPU combinations.
It has its greatest effect on Sparc machines when using the sun compiler.
If in doubt, try enable/disable it and running speed.
