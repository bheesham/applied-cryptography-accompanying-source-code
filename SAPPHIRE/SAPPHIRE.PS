%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - SAPPHIRE.DOC
%%BoundingBox: 18 9 593 784
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Word - SAPPHIRE.DOC) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {letter
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[
{mark 1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0 counttomark dup 3 add -1 roll exch 2 sub mul dup floor cvi dup 3 1 roll sub exch dup  3 add index exch 2 add index dup 4 1 roll sub mul add counttomark 1 add 1 roll  cleartomark } bind
/exec load currenttransfer /exec load] cvx settransfer
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
225 3059 101 (The ) 101 SB
326 3059 243 (Sapphire II) 243 SB
569 3059 338 ( Stream Cipher) 338 SB
2016 3059 131 (Page ) 131 SB
2147 3059 28 (1) 28 SB
32 0 0 117 117 0 0 0 108 /Helvetica-Bold /font13 ANSIFont font
364 321 1672 (The Sapphire II Stream Cipher) 1672 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
261 557 1878 (Encryption, Pseudorandom Number Generation, and) 1878 SB
633 647 1133 (Cryptographic Hash Generation) 1133 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1665 737 510 (by Michael Paul Johnson) 510 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 846 1719 (The Sapphire II Stream Cipher is a reasonably fast, compact, portable algorithm that is) 1719 SB
225 905 1938 (useful for encryption, authentication, and pseudorandom number generation. This algorithm fills a) 1938 SB
225 964 1811 (niche that makes it uniquely qualified in a variety of respects to fill some common needs for) 1811 SB
225 1023 1923 (security. The balancing act between speed, size, portability, security, versatility, and exportability) 1923 SB
225 1082 1949 (make the Sapphire II Stream Cipher a good choice for many applications. Because it is a relatively) 1949 SB
225 1141 1907 (new stream cipher and a very new method of cryptographic hash generation, caution and further) 1907 SB
225 1200 1366 (study is recommended before using it in critical security applications.) 1366 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 1359 439 (Background) 439 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1499 1748 (There are many good encryption algorithms available that can be used to add security to) 1748 SB
225 1558 1932 (software applications. There are also a lot of really poor excuses for cryptography in use, even by) 1932 SB
225 1617 1782 (large, otherwise reputable software publishers. Naturally, there are some things that are in) 1782 SB
225 1676 1912 (between. It takes some serious study to create a serious cryptosystem, and there are many issues) 1912 SB
225 1735 1751 (besides the core algorithm to consider, such as key management, file formats, and use of) 1751 SB
225 1794 1947 (temporary files and virtual RAM. The Sapphire II Stream Cipher should be a useful building block) 1947 SB
225 1853 1056 (in an application that includes some security features.) 1056 SB
375 1962 1704 (The basic core of this stream cipher is the same as one I started work on in November) 1704 SB
225 2021 1750 (1993, which involves the constant shuffling of a permutation vector. I was surprised and) 1750 SB
225 2080 1865 (somewhat amused to see a similar cipher \(at least in the core idea of a permutation vector that) 1865 SB
225 2139 1940 (was partially shuffled with each byte emitted\) posted to the Internet news group sci.crypt as being) 1940 SB
225 2198 1277 (compatible with RC4. This posting is available on the Internet at) 1277 SB
225 2257 1809 (ftp://ftp.dsi.unimi.it/pub/security/crypt/code/rc4.revealed.gz and in the sci.crypt archives on) 1809 SB
225 2316 1931 (ripem.msu.edu. The Sapphire II Stream Cipher is fundamentally different, however, in that it uses) 1931 SB
225 2375 1804 (both plain text and cipher text feedback, and thus is both easier to use in a secure way. The) 1804 SB
225 2434 1830 (Sapphire II Stream Cipher is much less vulnerable to a known plain text attack. See \223Stream) 1830 SB
225 2493 1809 (Cipher Structure,\224 below. The Sapphire II Stream Cipher differs from the original Sapphire) 1809 SB
225 2552 1906 (Stream Cipher in that it has been made more robust against an adaptive chosen plain text attack.) 1906 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 2 2
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
225 3059 101 (The ) 101 SB
326 3059 243 (Sapphire II) 243 SB
569 3059 338 ( Stream Cipher) 338 SB
2016 3059 131 (Page ) 131 SB
2147 3059 28 (2) 28 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 269 1170 (Generic Stream Cipher Structure) 1170 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 409 1737 (There are a wide variety of stream ciphers, but almost all of them fit into a subset of the) 1737 SB
225 468 548 (structure shown in figure 1.) 548 SB
375 577 1687 (The \223public information\224 box represents things like the current time or a usenet news) 1687 SB
225 636 1776 (group that is available to both the sender and receiver. This input may make sense for live) 1776 SB
225 695 1841 (communications channels, but is not practical for file storage. The Sapphire II Stream Cipher) 1841 SB
225 754 766 (doesn\222t make use of this possible path.) 766 SB
375 863 1754 (The feedback function determines how the state variables are updated with each cycle of) 1754 SB
225 922 1905 (the stream generator. It may or may not make use of feedback from the plain text, cipher text or) 1905 SB
225 981 1771 (results of the output function. Making use of cipher text feedback improves data masking) 1771 SB
225 1040 1856 (properties of the cipher. The plain text feedback improves the authentication properties of the) 1856 SB
225 1099 1947 (cipher \(making cryptographic hash generation possible\), but reduces the cipher\222s ability to recover) 1947 SB
225 1158 906 (meaningful data if the input stream is in error.) 906 SB
375 1267 1796 (The output function determines what the next output unit should be based on the values of) 1796 SB
225 1326 1947 (the state variables. An output unit may be a bit, a byte, or a machine word, but is normally not any) 1947 SB
225 1385 326 (longer than that.) 326 SB
375 1494 1768 (The combination function is usually something simple, like addition modulo-2 \(exclusive-) 1768 SB
225 1553 1076 (or\) or modulo-256 \(byte-wise addition without carry\).) 1076 SB
375 1662 1763 (Decryption is the same as encryption, except that the inverse of the combination function) 1763 SB
225 1721 1419 (is used and the roles of plain text and cipher text feedback are reversed.) 1419 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Times-Roman
%%Page: 3 3
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
225 3059 101 (The ) 101 SB
326 3059 243 (Sapphire II) 243 SB
569 3059 338 ( Stream Cipher) 338 SB
2016 3059 131 (Page ) 131 SB
2147 3059 28 (3) 28 SB
0 lc
0 lj
0 0 0 pC
6 4 SP
599 174 954 971 B
S
n
599 149 954 1296 B
S
n
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
gs 1783 1758 375 267 CB
1079 1025 342 (State Variables) 342 SB
gr
gs 1783 1758 375 267 CB
1079 1350 359 (Output Function) 359 SB
gr
gs 1783 1758 375 267 CB
1129 1775 282 (Combination) 282 SB
gr
gs 1783 1758 375 267 CB
1179 1850 194 (Function) 194 SB
gr
gs 1783 1758 375 267 CB
429 1800 224 (Plain Text) 224 SB
gr
gs 1783 1758 375 267 CB
1829 1800 260 (Cipher Text) 260 SB
gr
1 lc
1 lj
gs 1783 1758 375 267 CB
187 175 1265 1845 E
S
n
gr
0 lc
0 lj
324 124 379 1771 B
S
n
374 124 1779 1771 B
S
n
1 lc
1 lj
704 1846 M 375 0 1 PP
S
n
1079 1846 M -50 -25 1 PP
S
n
1079 1846 M -50 25 1 PP
S
n
1454 1846 M 325 0 1 PP
S
n
1779 1846 M -50 -25 1 PP
S
n
1779 1846 M -50 25 1 PP
S
n
1254 1446 M 0 225 1 PP
S
n
1254 1671 M -25 -50 1 PP
S
n
1254 1671 M 25 -50 1 PP
S
n
1254 1146 M 0 150 1 PP
S
n
1254 1296 M -25 -50 1 PP
S
n
1254 1296 M 25 -50 1 PP
S
n
1679 1846 M 0 -1125 1 PP
S
n
1679 721 M -125 0 1 PP
S
n
1554 721 M 50 -25 1 PP
S
n
1554 721 M 50 25 1 PP
S
n
754 671 M 200 0 1 PP
S
n
754 671 M 0 1175 1 PP
S
n
954 671 M -50 25 1 PP
S
n
954 671 M -50 -25 1 PP
S
n
gs 1783 1758 375 267 CB
1079 350 403 (Public Information) 403 SB
gr
0 lc
0 lj
599 199 954 271 B
S
n
1 lc
1 lj
1229 471 M 0 150 1 PP
S
n
gs 1783 1758 375 267 CB
1054 675 429 (Feedback Function) 429 SB
gr
0 lc
0 lj
599 149 954 621 B
S
n
1 lc
1 lj
1104 971 M 0 -200 1 PP
S
n
1104 771 M -25 50 1 PP
S
n
1104 771 M 25 50 1 PP
S
n
1404 771 M 0 200 1 PP
S
n
1404 971 M -25 -50 1 PP
S
n
1404 971 M 25 -50 1 PP
S
n
954 746 M -125 0 1 PP
S
n
829 746 M 0 775 1 PP
S
n
829 1521 M 425 0 1 PP
S
n
954 746 M -50 25 1 PP
S
n
954 746 M -50 -25 1 PP
S
n
1229 621 M -25 -50 1 PP
S
n
1229 621 M 25 -50 1 PP
S
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 2077 1734 (Figure 1. Generic stream cipher encryption. The stream cipher derives its cryptographic) 1734 SB
225 2136 1946 (strength from the complexity of the output function or the complexity of the feedback function, or) 1946 SB
225 2195 1217 (both. Not all data paths shown are used by all stream ciphers.) 1217 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 2354 1501 (Overview of the Sapphire II Stream Cipher) 1501 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 2494 1504 (The Sapphire II Stream Cipher is designed to have the following properties:) 1504 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 2576 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 2581 1798 (Useful for generation of cryptographic check values as well as protecting message privacy.) 1798 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 2663 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 2668 994 (Accepts a variable length key for strength control.) 994 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 2750 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 2755 495 (Strong enough to justify ) 495 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
795 2755 146 (at least) 146 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
941 2755 1007 ( a 64 bit key for balanced security. Further study is) 1007 SB
300 2814 923 (recommended to see if this is, in fact, the case.) 923 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 2896 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 2901 1593 (Small enough to be built into other applications with several keys active at once.) 1593 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 4 4
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
225 3059 101 (The ) 101 SB
326 3059 243 (Sapphire II) 243 SB
569 3059 338 ( Stream Cipher) 338 SB
2016 3059 131 (Page ) 131 SB
2147 3059 28 (4) 28 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 267 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 272 1691 (Key setup fast enough to support frequent key change operations but slow enough to) 1691 SB
300 331 813 (discourage brute force attack on the key.) 813 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 413 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 418 1757 (Fast enough to not significantly impact the speed of file read & write operations on most) 1757 SB
300 477 356 (current platforms.) 356 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 559 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 564 1433 (Portable among common computers and efficient in C, C++, and Pascal.) 1433 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 646 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 651 726 (Operates on one 8-bit byte at a time.) 726 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 733 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 738 1779 (Include both cipher text and plain text feedback \(for both optimal data hiding and value in) 1779 SB
300 797 797 (creation of cryptographic check values\).) 797 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 879 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 884 1358 (Acceptable performance as a pure pseudorandom number generator.) 1358 SB
32 0 0 50 50 0 0 0 50 /Symbol font
225 966 36 (\267 ) 75 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 971 1126 (Allows some key re-use without severe security impacts.) 1126 SB
375 1080 1751 (The Sapphire II Stream Cipher is based on a state machine. The state consists of 5 index) 1751 SB
225 1139 1742 (values and a permutation vector. The permutation vector is simply an array containing a) 1742 SB
225 1198 1948 (permutation of the numbers from 0 through 255. Up to four of the bytes in the permutation vector) 1948 SB
225 1257 1876 (are moved to new locations \(which may be the same as the old location\) for every byte output.) 1876 SB
225 1316 1710 (The output byte is a nonlinear function of all 5 of the index values 8 of the bytes in the) 1710 SB
225 1375 1937 (permutation vector, thus frustrating attempts to solve for the state variables based on past output.) 1937 SB
225 1434 1742 (On initialization, the index variables are set \(somewhat arbitrarily\) to the contents of the) 1742 SB
225 1493 1860 (permutation vector at locations 1, 3, 5, 7, and a key-dependent value. The permutation vector) 1860 SB
225 1552 1860 (\(called the cards array in the source code\) is shuffled based on the user\222s key. This shuffling is) 1860 SB
225 1611 1869 (done in a way that is designed to minimize the bias in the destinations of the bytes in the array.) 1869 SB
225 1670 1884 (The biggest advantage in this method is not in the elimination of the bias, per se, but in slowing) 1884 SB
225 1729 1376 (down the process slightly to make brute force attack more expensive.) 1376 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 1888 364 (Key Setup) 364 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 2028 1754 (Key setup \(illustrated by the function initialize in sapphire.cpp and sapphire.pas\) consists) 1754 SB
225 2087 279 (of three parts:) 279 SB
375 2196 1527 (1. Set the permutation vector to a known state \(a simple counting sequence\).) 1527 SB
375 2305 1761 (2. Starting at the end of the vector, swap each element of the permutation vector with an) 1761 SB
225 2364 1786 (element indexed somewhere from 0 to the current index \(chosen by the function keyrand\).) 1786 SB
375 2473 1110 (3. Initialize the index variables to key-dependent values.) 1110 SB
375 2582 1717 (The keyrand function \(see sapphire.cpp or sapphire.pas\) returns a value between 0 and) 1717 SB
225 2641 1914 (some maximum number based on the user\222s key, the current state of the permutation vector, and) 1914 SB
225 2700 1918 (an index running sum called rsum. Note that the length of the key is used in keyrand, too, so that) 1918 SB
225 2759 1624 (a key like \223abcd\224 will not result in the same permutation as a key like \223abcdabcd\224.) 1624 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Roman
%%Page: 5 5
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
225 3059 101 (The ) 101 SB
326 3059 243 (Sapphire II) 243 SB
569 3059 338 ( Stream Cipher) 338 SB
2016 3059 131 (Page ) 131 SB
2147 3059 28 (5) 28 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 269 1687 (If this instance of the stream cipher is going to be used for cryptographic check value) 1687 SB
225 328 1795 (\(hash\) generation and not for encryption, a separate, faster initialization is used that simply) 1795 SB
225 387 1889 (initializes the indices as above and sets the permutation vector to an inverse counting sequence.) 1889 SB
225 446 1152 (See the function hash_init in sapphire.cpp or sapphire.pas.) 1152 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 605 389 (Encryption) 389 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 745 1696 (Each encryption operation involves updating the index values, moving \(up to\) 5 bytes) 1696 SB
225 804 1864 (around in the permutation vector, selecting an output byte, and adding the output byte bitwise) 1864 SB
225 863 1888 (modulo-2 \(exclusive-or\) to the plain text byte to produce the cipher text byte. The index values) 1888 SB
225 922 1939 (are incremented by different rules. The index called rotor just increases by one \(modulo 256\) each) 1939 SB
225 981 1847 (time. Ratchet increases by the value in the permutation vector pointed to by rotor. Avalanche) 1847 SB
225 1040 1858 (increases by the value in the permutation vector pointed to by another byte in the permutation) 1858 SB
225 1099 1912 (vector pointed to by the last cipher text byte. The last plain text and the last cipher text bytes are) 1912 SB
225 1158 1689 (also kept as index variables. See the function encrypt in sapphire.cpp or sapphire.pas.) 1689 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 1317 389 (Decryption) 389 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1457 1765 (Decryption is the almost same as encryption, except for the assignments to last_plain and) 1765 SB
225 1516 1890 (last_cipher, which are swapped. The return value is the plain text byte instead of the cipher text) 1890 SB
225 1575 1247 (byte. See the function decrypt, in sapphire.cpp or sapphire.pas.) 1247 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 1734 1271 (Pseudorandom Number Generation) 1271 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1874 1719 (If you want to generate random numbers without encrypting any particular cipher text,) 1719 SB
225 1933 1804 (simply encrypt 0 \(or any other arbitrary value\). There is still plenty of complexity left in the) 1804 SB
225 1992 1771 (system to ensure unpredictability \(if the key is not known\) of the output stream when this) 1771 SB
225 2051 1786 (simplification is made. If you want even less predictable numbers, you could encrypt some) 1786 SB
225 2110 1778 (physical information that may be available to you, like keystroke timings or the number of) 1778 SB
225 2169 1912 (processes running on a multi-user system. The quality of the pseudorandom numbers obtained in) 1912 SB
225 2228 1832 (this way are much better for statistical modeling and even games than the linear congruential) 1832 SB
225 2287 906 (generators usually found as a library function.) 906 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 2446 602 (Hash Generation) 602 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 2586 1663 (A cryptographic check value \(also called a hash or message integrity check value\) is) 1663 SB
225 2645 1900 (simply a \223finger print\224 of a message computed in such a way that it is computationally infeasible) 1900 SB
225 2704 1865 (to find another message that has the same \223finger print.\224 Such hash values are commonly used) 1865 SB
225 2763 1919 (with digital signatures, since all currently known digital signature algorithms are much to slow to) 1919 SB
225 2822 1948 (apply to an entire message. They are also useful for checking that a file has not been modified by a) 1948 SB
225 2881 1908 (virus or other malicious agent. A cryptographic hash takes longer to generate than a CRC, but it) 1908 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Times-Roman
%%Page: 6 6
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
225 3059 101 (The ) 101 SB
326 3059 243 (Sapphire II) 243 SB
569 3059 338 ( Stream Cipher) 338 SB
2016 3059 131 (Page ) 131 SB
2147 3059 28 (6) 28 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 269 1805 (is trivial to modify a file to have any desired CRC. To use the Sapphire II Stream Cipher to) 1805 SB
225 328 1394 (compute a cryptographic check value of a message of arbitrary length:) 1394 SB
375 437 1253 (1. Initialize the stream cipher state with a initialize or hash_init.) 1253 SB
375 546 1677 (2. Encrypt all of the bytes of the message to check \(or if the message was encrypted,) 1677 SB
225 605 482 (decrypt all of the bytes\).) 482 SB
375 714 778 (3. Call hash_final to get the hash value.) 778 SB
375 823 1626 (The hash_final function \223stirs\224 up the permutation vector by encrypting an inverse) 1626 SB
225 882 1820 (counting sequence from 255 down to 0 to ensure that the effects of the last few bytes of the) 1820 SB
225 941 1950 (message are well distributed. It then encrypts zeroes to obtain the hash value. This step is essential) 1950 SB
225 1000 1899 (in ensuring that the effect of the last byte has fully \223avalanched\224 its effect throughout the output) 1899 SB
225 1059 1876 (bytes. The normal length of a cryptographic hash is 20 bytes, but it would be reasonable to use) 1876 SB
225 1118 1805 (any value from 16 to 32. 16-byte hash values are generated by some older, well-established) 1805 SB
225 1177 1944 (cryptographic hash functions like MD5. 20-byte hashes \(like those generated by NIST\222s SHA\) are) 1944 SB
225 1236 1866 (long enough to be immune to brute force attacks in the foreseeable future, and a good balance) 1866 SB
225 1295 1900 (between space requirements and security. A 32-byte hash is suitable for very long term security,) 1900 SB
225 1354 1829 (provided that nobody finds an attack better than brute force on this hash generation method.) 1829 SB
375 1463 1785 (The primary advantage of using the Sapphire II Stream Cipher for hash generation instead) 1785 SB
225 1522 1879 (of established standards like SHA or MD5 is speed. This is especially true if you were going to) 1879 SB
225 1581 1837 (use the Sapphire II Stream Cipher for encryption, too. The disadvantage relative to the more) 1837 SB
225 1640 1850 (established options is that the worthiness of the Sapphire II Stream Cipher as a cryptographic) 1850 SB
225 1699 1420 (hash function has not been evaluated nearly as heavily as SHA or MD5.) 1420 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 1858 662 (Key Size Selection) 662 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1998 1759 (There are really two kinds of user keys to consider: \(1\) random binary keys, and \(2\) pass) 1759 SB
225 2057 1940 (phrases. Analysis of random binary keys is fairly straight forward. Pass phrases tend to have much) 1940 SB
225 2116 1898 (less entropy per byte, but the analysis made for random binary keys applies to the entropy in the) 1898 SB
225 2175 1800 (pass phrase. The length limit of the key \(255 bytes\) is adequate to allow a pass phrase with) 1800 SB
225 2234 803 (enough entropy to be considered strong.) 803 SB
375 2343 1644 (To be real generous to a cryptanalyst, assume dedicated Sapphire II Stream Cipher) 1644 SB
225 2402 1858 (cracking hardware. The constant portion of the key scheduling can be done in one cycle. That) 1858 SB
225 2461 1782 (leaves at least 256 cycles to do the swapping \(probably more, because of the intricacies of) 1782 SB
225 2520 1872 (keyrand, but we'll ignore that, too, for now\). Assume a machine clock of about 256 megahertz) 1872 SB
225 2579 1934 (\(fairly generous\). That comes to about one key tried per microsecond. On average, you only have) 1934 SB
225 2638 1913 (to try half of the keys. Also assume that trying the key to see if it works can be pipelined, so that) 1913 SB
225 2697 1687 (it doesn't add time to the estimate. Based on these assumptions \(reasonable for major) 1687 SB
225 2756 1867 (governments\), and rounding to two significant digits, the following key length versus cracking) 1867 SB
225 2815 419 (time estimates result:) 419 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Times-Roman
%%Page: 7 7
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
225 3059 101 (The ) 101 SB
326 3059 243 (Sapphire II) 243 SB
569 3059 338 ( Stream Cipher) 338 SB
2016 3059 131 (Page ) 131 SB
2147 3059 28 (7) 28 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font29 ANSIFont font
375 269 337 (Key length, bits) 337 SB
825 269 295 (Time to crack) 295 SB
0 0 0 fC
/fm 256 def
336 4 375 320 B
1 F
n
/fm 256 def
294 4 825 320 B
1 F
n
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 328 50 (32) 50 SB
825 328 710 (35 minutes \(exportable in Quicrypt\)) 710 SB
375 387 50 (33) 50 SB
825 387 758 (1.2 hours \(not exportable in Quicrypt\)) 758 SB
375 446 50 (40) 50 SB
825 446 574 (6.4 days \(exportable in RC4\)) 574 SB
375 505 50 (56) 50 SB
825 505 542 (1,100 years \(DES key size\)) 542 SB
375 564 50 (64) 50 SB
825 564 598 (290,000 years \(good enough f) 598 SB
1423 564 302 (or most things\)) 302 SB
375 623 50 (80) 50 SB
825 623 725 (19 billion years \(Skipjack\222s key size\)) 725 SB
375 682 75 (128) 75 SB
825 682 137 (5.4x10) 137 SB
32 0 0 31 31 0 0 0 28 /Times-Roman /font32 ANSIFont font
962 676 32 (24) 32 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
994 682 895 ( years \(Sufficient for very long term security\)) 895 SB
375 850 1787 (Naturally, the above estimates can vary by several orders of magnitude based on what you) 1787 SB
225 909 1887 (assume for attacker's hardware, budget, and motivation. It would be possible to employ 10,000) 1887 SB
225 968 1927 (cracking machines in parallel, for example, making 56-bit keys vulnerable to rapid cracking. Note) 1927 SB
225 1027 1898 (that the larger key sizes \(at least 64 bits\) have lots of room for error in this estimation while still) 1898 SB
225 1086 734 (protecting data for its useful lifetime.) 734 SB
375 1195 1702 (In the range listed above, the probability of spare keys \(two keys resulting in the same) 1702 SB
225 1254 1883 (initial permutation vector\) is small enough to ignore, since the number of keys possible is much) 1883 SB
225 1313 1332 (less than the number of possible states of the permutation vector \(2) 1332 SB
32 0 0 31 31 0 0 0 28 /Times-Roman /font32 ANSIFont font
1557 1307 48 (128) 48 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1605 1313 203 ( << 256!\).) 203 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 1472 309 (Strength) 309 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1612 1734 (There are several measures of strength for a stream cipher. There are other measures of) 1734 SB
225 1671 1854 (strength for a cryptographic hash function. The Sapphire II Stream Cipher tries to measure as) 1854 SB
225 1730 1854 (both a stream cipher and a cryptographic hash function, while still maintaining high speed and) 1854 SB
225 1789 790 (small size in a software implementation.) 790 SB
375 1898 1788 (For a stream cipher, internal state space should be at least as big as the number of possible) 1788 SB
225 1957 1906 (keys to be considered strong. The state associated with the permutation vector alone constitutes) 1906 SB
225 2016 1272 (overkill, since 256! is much greater than a typical key space of 2) 1272 SB
32 0 0 31 31 0 0 0 28 /Times-Roman /font32 ANSIFont font
1497 2010 32 (64) 32 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1529 2016 13 (.) 13 SB
375 2125 1782 (If you have a history of stream output from initialization \(or equivalently, previous known) 1782 SB
225 2184 1858 (plaintext and ciphertext\), then rotor, last_plain, and last_cipher are known to an attacker. The) 1858 SB
225 2243 1931 (other two index values, flipper and avalanche, cannot be solved for without knowing the contents) 1931 SB
225 2302 1923 (of parts of the permutation vector that change with each byte encrypted. Solving for the contents) 1923 SB
225 2361 1859 (of the permutation vector by keeping track of the possible positions of the index variables and) 1859 SB
225 2420 1815 (possible contents of the permutation vector at each byte position is not possible, since more) 1815 SB
225 2479 1859 (variables than known values are generated at each iteration. Indeed, fewer index variables and) 1859 SB
225 2538 1712 (swaps could be used to achieve security, here, if it were not for the hash requirements.) 1712 SB
375 2647 1689 (A more severe test of a stream cipher with feedback is to allow an attacker to choose) 1689 SB
225 2706 1947 (inputs, see the outputs, and reorigninate the cipher at will. The attacker then tries to determine the) 1947 SB
225 2765 1772 (internal state of the cipher or the corresponding key. The multiple index operations of the) 1772 SB
225 2824 1842 (Sapphire II Stream Cipher\222s output function and the key-dependent initialization of the index) 1842 SB
225 2883 1844 (variables are designed to make attacks that make use of this situation to determine the key or) 1844 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 8 8
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
225 3059 101 (The ) 101 SB
326 3059 243 (Sapphire II) 243 SB
569 3059 338 ( Stream Cipher) 338 SB
2016 3059 131 (Page ) 131 SB
2147 3059 28 (8) 28 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 269 1845 (predict future output impractical. It is possible, however, for an attacker to learn some things) 1845 SB
225 328 1931 (about the stream cipher\222s internal structure from such an attack. Then again, it would be easier to) 1931 SB
225 387 1200 (learn about the structure of the cipher by reading this article.) 1200 SB
375 496 1787 (Another measure of strength is how long a cipher has with stood public scrutiny without a) 1787 SB
225 555 1892 (serious weakness being published. The wait for public scrutiny doesn\222t actually make the cipher) 1892 SB
225 614 1920 (stronger or weaker, it just increases confidence. On the other hand, the longer a cipher is known,) 1920 SB
225 673 1081 (the more likely that someone will find a weakness and ) 1081 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
1306 673 64 (not) 64 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
1370 673 772 ( publish it. This is one measure that we) 772 SB
225 732 1891 (will have to wait to see how the Sapphire II Stream Cipher fares, since it has only recently been) 1891 SB
225 791 435 (released to the public.) 435 SB
375 900 1747 (One measure of the strength of a cryptographic hash function is that any small change in) 1747 SB
225 959 1885 (the plain text results in a change of approximately half of the bits of the resulting hash function.) 1885 SB
225 1018 1906 (Although there exists a class of small two or three byte changes that result in only small changes) 1906 SB
225 1077 1843 (the cipher text emitted, this situation is avoided by the post-processing done in the hash_final) 1843 SB
225 1136 864 (function \(see sapphire.cpp or sapphire.pas\).) 864 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 1295 1632 (Integrating Sapphire II with Your Applications) 1632 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1435 1748 (A trivial program to demonstrate both the encryption and hash generation capabilities of) 1748 SB
225 1494 1916 (the Sapphire II Stream Cipher in Pascal is shown in stest.pas. A functionally identical program in) 1916 SB
225 1553 597 (C++ is shown in sapptest.cpp.) 597 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 1712 1426 (Exporting the Sapphire II Stream Cipher) 1426 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1852 1753 (The U. S. Department of State, Office of Defense Trade Controls \(DOS/DTC\), together) 1753 SB
225 1911 1860 (with the National Security Administration, limit the strength of computer software that can be) 1860 SB
225 1970 1897 (shipped out of the USA without a license from the DOS/DTC. The most frustrating thing about) 1897 SB
225 2029 1946 (this is that they will not tell you what the limit is. Naturally, this raises some serious Constitutional) 1946 SB
225 2088 1924 (questions. They will, however, review complete products that are ready for market in all respects) 1924 SB
225 2147 1895 (and tell you if a license is required from the Department of State to export the product, or if the) 1895 SB
225 2206 1894 (product can be exported under Department of Commerce rules \(which are much more relaxed\).) 1894 SB
225 2265 1902 (They claim that they will complete such a review, under certain circumstances, in a maximum of) 1902 SB
225 2324 1859 (15 business days. they missed this deadline both times I tried the process, but I did learn some) 1859 SB
225 2383 664 (things that may be useful for you.) 664 SB
375 2492 1719 (I wrote a shareware encryption program called Quicrypt that uses the Sapphire Stream) 1719 SB
225 2551 1798 (Cipher \(which is very close to the Sapphire II Stream Cipher\). Quicrypt encrypts a random) 1798 SB
225 2610 1925 (session key \(from keystroke timings, among other sources of random data\) with the user\222s key \(a) 1925 SB
225 2669 1912 (memorized pass phrase\), then encrypts the user\222s data with the random session key. The random) 1912 SB
225 2728 1822 (session key is limited to 32 bits in the exportable version, and 128 bits in the non-exportable) 1822 SB
225 2787 1836 (version. The 32-bit session key limit may or may not depend on other factors in the Quicrypt) 1836 SB
225 2846 1907 (design \(like the fact that only the session key and not the user\222s key is limited in length\), but you) 1907 SB
225 2905 1692 (should have no trouble freely exporting any encryption product that uses such a short) 1692 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 9 9
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
225 3059 101 (The ) 101 SB
326 3059 243 (Sapphire II) 243 SB
569 3059 338 ( Stream Cipher) 338 SB
2016 3059 131 (Page ) 131 SB
2147 3059 28 (9) 28 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
225 269 1863 (cryptographic key if there is any fairness to the DOS/DTC and NSA at all. You might even be) 1863 SB
225 328 1894 (able to talk them into the use of a longer key, since 40-bit keys are routinely approved for RC4,) 1894 SB
225 387 1939 (which is similar in some ways. I later upgraded the domestic \(non-exportable\) version of Quicrypt) 1939 SB
225 446 1752 (to use Sapphire II instead of Sapphire, but left the exportable version as it was, since the) 1752 SB
225 505 1913 (improvement from Sapphire to Sapphire II makes essentially no difference with a weakened key.) 1913 SB
375 614 1738 (There is a another way to weaken a cryptographic product for export without making it) 1738 SB
225 673 1894 (quite so vulnerable to criminal cryptanalysis. You could simply encrypt all or part of the session) 1894 SB
225 732 1864 (key with the public key of an escrow agent, and embed the result in the output file. I didn\222t do) 1864 SB
225 791 1942 (this, since it would involve royalties to Public Key Partners \(not so bad if you were using RSA for) 1942 SB
225 850 1911 (something else, too, but I wasn\222t\) and because selection of the escrow agent\(s\) involves some of) 1911 SB
225 909 1911 (the same sticky issues associated with the U. S. Government\222s Escrowed Encryption Standard. I) 1911 SB
225 968 1927 (didn\222t ask the NSA about this option specifically, but they seemed open to options similar to this.) 1927 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 1127 969 (Availability of Source Code) 969 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1267 832 (Source code is available on the internet as) 832 SB
225 1326 1830 (ftp://ftp.csn.net/mpj/I_will_not_export/crypto_???????/file/sapphire.zip, where the ??????? is) 1830 SB
225 1385 1909 (revealed along with the export warning in ftp://ftp.csn.net/mpj/README. For more information) 1909 SB
225 1444 1715 (on Quicrypt, mentioned above, get ftp://ftp.csn.net/mpj/qcrypt11.zip. Sapphire.zip and) 1715 SB
225 1503 1682 (qcrypt11.zip are also available from the Colorado Catacombs BBS at 303-772-1062.) 1682 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 1662 360 (Challenge) 360 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 1802 1744 (Since the Sapphire II Stream Cipher is a new cipher, and the approach mentioned above) 1744 SB
225 1861 1929 (for fast cryptographic hash generation is also new, you are invited to help evaluate the security of) 1929 SB
225 1920 1645 (these two uses of this algorithm. If you find any weaknesses, please let me know at) 1645 SB
225 1979 1922 (m.p.johnson@ieee.org or at PO Box 1151, Longmont CO 80502-1151, USA. I\222ll send a genuine) 1922 SB
225 2038 1890 (sapphire to the first one to reveal to me a method better than brute force for solving for the key) 1890 SB
225 2097 1862 (\(or the state variables\) of the Sapphire II Stream Cipher from known plain and cipher text. I\222ll) 1862 SB
225 2156 1880 (also send a genuine sapphire to the first person to reveal to me a way better than brute force to) 1880 SB
225 2215 1208 (manufacture a forged message with a given Sapphire II hash.) 1208 SB
32 0 0 75 75 0 0 0 70 /Helvetica-Bold /font13 ANSIFont font
225 2374 616 (About the Author) 616 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
375 2514 1750 (Michael Johnson has been interested in computers and cryptography since he was a little) 1750 SB
225 2573 1868 (boy. He earned an MSEE degree at the University of Colorado at Colorado Springs, where he) 1868 SB
225 2632 1071 (wrote a thesis on data compression and cryptography.) 1071 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Times-Roman
%%Trailer
SVDoc restore
end
%%Pages: 9
% TrueType font name key:
%    MSTT31c12c = 47ffDArialF00000000000002bc0000
%    MSTT31c137 = 47ffDArialF0000004b000002bc0000
%    MSTT31c142 = 47ffDTimes New RomanF00000032000001900001
%    MSTT31c158 = 47ffDTimes New RomanF00000032000001900000
%    MSTT31c165 = 43c7DArialF00000000000002bc0000
%    MSTT31c170 = 43c7DArialF0000004b000002bc0000
%    MSTT31c17b = 43c7DTimes New RomanF00000032000001900001
%    MSTT31c188 = 43c7DTimes New RomanF00000032000001900000
%    MSTT31c195 = 43c7DSymbolF00000032000001900000
%    MSTT31c1a0 = 43c7DArialF00000032000001900000
%    MSTT31c1ab = 43c7DTimes New RomanF0000001a000001900000
%    MSTT31c1b8 = 43c7DTimes New RomanF00000032000002bc0000
%    MSTT31c1c5 = 43c7DTimes New RomanF0000001f000001900000
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman

%%EOF
