/* -*- C -*- */

/*
 *  stream.in : Generic framework for stream ciphers
 *
 * Part of the Python Cryptography Toolkit, version 1.0.0
 *
 * Copyright (C) 1995, A.M. Kuchling
 *
 * Distribute and use freely; there are no restrictions on further 
 * dissemination and usage except those imposed by the laws of your 
 * country of residence.
 *
 */


#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef _HAVE_STDC_HEADERS
#include <string.h>
#endif

#include "Python.h"
#include "modsupport.h"

#ifdef __GNUC__
#define inline __inline__
#else
#define inline
#endif


 /* Endianness testing and definitions */
#define TestEndianness(variable) {int i=1; variable=BIG_ENDIAN;\
                                  if (*((char*)&i)==1) variable=LITTLE_ENDIAN;}

#define LITTLE_ENDIAN 1
#define BIG_ENDIAN 0


        /*
	 *
	 * Python interface
	 *
	 */

#define PCTObject_HEAD PyObject_HEAD int dummy /* dummy is never used */

@@IMPLEMENTATION@@


staticforward PyTypeObject @@ALGORITHM@@type;

#define is_@@ALGORITHM@@object(v)		((v)->ob_type == &@@ALGORITHM@@type)

static @@ALGORITHM@@object *
 new@@ALGORITHM@@object()
{
 @@ALGORITHM@@object * new;
 new = PyObject_NEW(@@ALGORITHM@@object, &@@ALGORITHM@@type);
 return new;
}

static void
@@ALGORITHM@@dealloc(self)
@@ALGORITHM@@object * self;
{	      	/* Overwrite the contents of the object, just in case... */
 int i;

 for (i = 0; i < sizeof(@@ALGORITHM@@object); i++)
  *((char *) self + i) = '\0';
 PyMem_DEL(self);
}


static @@ALGORITHM@@object *
@@ALGORITHM@@new(self, args)
     PyObject *self;		/* Not used */
     PyObject *args;
{
 unsigned char *key;
 @@ALGORITHM@@object * new;
 int keylen;

 if (!PyArg_Parse(args, "s#", &key, &keylen))
   {
    return (NULL);
   }

 if (@@KEYSIZE@@!=0 && keylen != @@KEYSIZE@@)
   {
    PyErr_SetString(PyExc_ValueError, "@@ALGORITHM@@ key must be "
		    "@@KEYSIZE@@ bytes long");
    return (NULL);
   }
 if (@@KEYSIZE@@== 0 && keylen == 0)
   {
    PyErr_SetString(PyExc_ValueError, "@@ALGORITHM@@ key cannot be "
		    "the null string (0 bytes long)");
    return (NULL);
   }
 new = new@@ALGORITHM@@object();
 @@ALGORITHM@@init(new, key, keylen);
 if (PyErr_Occurred())
   {
    Py_DECREF(new);
    return (NULL);
   }
 return new;
}


static PyObject *
@@ALGORITHM@@_Encrypt(self, args)
@@ALGORITHM@@object * self;
     PyObject *args;
{
 unsigned char *buffer, *str;
 int len;
 PyObject *result;

 if (!PyArg_Parse(args, "s#", &str, &len))
  return (NULL);
 if (len == 0)			/* Handle empty string */
   {
    return PyString_FromStringAndSize(NULL, 0);
   }
 buffer = malloc(len);
 if (buffer == NULL)
   {
    PyErr_SetString(PyExc_MemoryError, "No memory available in "
		    "@@ALGORITHM@@ encrypt");
    return (NULL);
   }
 memcpy(buffer, str, len);
 @@ALGORITHM@@encrypt(self, buffer, len);
 result = PyString_FromStringAndSize(buffer, len);
 free(buffer);
 return (result);
}

static PyObject *
@@ALGORITHM@@_Decrypt(self, args)
@@ALGORITHM@@object * self;
     PyObject *args;
{
 char *buffer, *str;
 int len;
 PyObject *result;

 if (!PyArg_Parse(args, "s#", &str, &len))
  return (NULL);
 if (len == 0)			/* Handle empty string */
   {
    return PyString_FromStringAndSize(NULL, 0);
   }
 buffer = malloc(len);
 if (buffer == NULL)
   {
    PyErr_SetString(PyExc_MemoryError, "No memory available in "
		    "@@ALGORITHM@@ decrypt");
    return (NULL);
   }
 memcpy(buffer, str, len);
 @@ALGORITHM@@decrypt(self, buffer, len);
 result = PyString_FromStringAndSize(buffer, len);
 free(buffer);
 return (result);
}

/* @@ALGORITHM@@object methods */

static PyMethodDef @@ALGORITHM@@methods[] =
{
 {"encrypt", (PyCFunction) @@ALGORITHM@@_Encrypt},
 {"decrypt", (PyCFunction) @@ALGORITHM@@_Decrypt},
 {NULL, NULL}			/* sentinel */
};

static PyObject *
@@ALGORITHM@@getattr(self, name)
@@ALGORITHM@@object * self;
     char *name;
{
 return Py_FindMethod(@@ALGORITHM@@methods, (PyObject *) self, name);
}


/* List of functions defined in the module */

static struct PyMethodDef modulemethods[] =
{
 {"new", (PyCFunction) @@ALGORITHM@@new},
 {NULL, NULL}			/* sentinel */
};

static PyTypeObject @@ALGORITHM@@type =
{
 PyObject_HEAD_INIT(&PyType_Type)
 0,				/*ob_size*/
 "@@ALGORITHM@@",		/*tp_name*/
 sizeof(@@ALGORITHM@@object),	/*tp_size*/
 0,				/*tp_itemsize*/
 /* methods */
 @@ALGORITHM@@dealloc,	/*tp_dealloc*/
 0,				/*tp_print*/
 @@ALGORITHM@@getattr,	/*tp_getattr*/
 0,		/*tp_setattr*/
 0,			/*tp_compare*/
 0,			/*tp_repr*/
 0,				/*tp_as_number*/
};

/* Initialization function for the module (*must* be called initxx) */

#define insint(n,v) {PyObject *o=PyInt_FromLong(v); if (o!=NULL) {PyDict_SetItemString(d,n,o); Py_DECREF(o);}}

void
 init@@MODNAME@@()
{
 PyObject *m, *d, *x;

 /* Create the module and add the functions */
 m = Py_InitModule("@@MODNAME@@", modulemethods);

 /* Add some symbolic constants to the module */
 d = PyModule_GetDict(m);
 x = PyString_FromString("@@MODNAME@@.error");
 PyDict_SetItemString(d, "error", x);

 insint("blocksize", @@BLOCKSIZE@@);
 insint("keysize", @@KEYSIZE@@);

 /* Check for errors */
 if (PyErr_Occurred())
  Py_FatalError("can't initialize module @@MODNAME@@");
}
